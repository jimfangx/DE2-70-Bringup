module VGA_Sync (
    input iclk_50m, iRST_N,
    output oVGA_H_SYNC, oVGA_V_SYNC, oVGA_BLANK, oPIX_POS_UPDATE,
    output [9:0] oCurrent_X, oCurrent_Y
    // oCurrent_X, oCurrent_Y, oPIX_POS_UPDATE are optional
);

// horizontal params    
parameter H_DISPLAY = 639;
parameter H_BACK = 48; // H_LEFT BORDER
parameter H_FRONT = 16; // H_RIGHT BORDER
parameter H_SYNC = 96; // H_SYNC
parameter H_SYNC_START = H_DISPLAY + H_FRONT;
parameter H_SYNC_END = H_DISPLAY + H_FRONT + H_SYNC;
parameter TOTAL_PIX_IN_LINE = 799;

// vertical params
parameter V_DISPLAY = 479;
parameter V_BACK = 33; // V TOP
parameter V_FRONT = 10; // V BOT
parameter V_SYNC = 2;
parameter V_SYNC_START = V_DISPLAY + V_FRONT;
parameter V_SYNC_END = V_DISPLAY + V_FRONT + V_SYNC;
parameter TOTAL_LINES = 524;

// Mod 2 clock for VGA pixel clock of 25 MHz
reg pixel_reg;
wire pixel_next, pixel_clk

always @(posedge iclk_50m) begin
    pixel_reg <= pixel_next;
end

assign pixel_next = ~pixel_reg;
assign pixel_clk = (pixel_reg == 0);


// set hsync & vsync
assign oVGA_H_SYNC = ~((oCurrent_X >= H_SYNC_START) && (oCurrent_X < H_SYNC_END)); // negative polarity: https://electronics.stackexchange.com/questions/522053/what-does-it-mean-positive-or-negative-polarity-in-vgas-hsynch-and-vsynch

assign oVGA_V_SYNC = ~((oCurrent_Y >= V_SYNC_START) && (oCurrent_Y < V_SYNC_END)); // neg polarity

assign oVGA_BLANK = (oCurrent_X <= H_DISPLAY) && (oCurrent_Y <= V_DISPLAY) // see ADV7123 datasheet pg 9: while blank is logic 0, RGB inputs are ignored

// calculate x & y position
always @(posedge pixel_clk, posedge iRST_N) begin
    if (oCurrent_X == TOTAL_PIX_IN_LINE) begin // last pixel on line
        oCurrent_X <= 0 ;
        oCurrent_Y <= (oCurrent_Y <= TOTAL_LINES) ? oCurrent_Y + 1 : 0; // if current y <= # of lines, then y + 1 (since total lines is 1 less than actual total lines), else y = 0
    end
    else begin
        oCurrent_X <= oCurrent_X + 1; // advance by 1 pix
    end
    if (iRST_N) begin // last assignment wins in verilog
        oCurrent_X <= 0;
        oCurrent_Y <= 0;
    end
end

endmodule